cmake_minimum_required(VERSION 3.0.0)
project(ArtificialNN VERSION 0.1.0)

set(ANN_INCLUDE_DIR ${ANN_INCLUDE_DIR} "${CMAKE_CURRENT_SOURCE_DIR}/ArtificialNN/src/CNN/LearnFilter")
set(ANN_INCLUDE_DIR ${ANN_INCLUDE_DIR} "${CMAKE_CURRENT_SOURCE_DIR}/ArtificialNN/src/CNN/Filter")

set(ANN_INCLUDE_DIR ${ANN_INCLUDE_DIR} "${CMAKE_CURRENT_SOURCE_DIR}/ArtificialNN/src/Instruments/Functors")
set(ANN_INCLUDE_DIR ${ANN_INCLUDE_DIR} "${CMAKE_CURRENT_SOURCE_DIR}/ArtificialNN/src/Instruments/Initializers")
set(ANN_INCLUDE_DIR ${ANN_INCLUDE_DIR} "${CMAKE_CURRENT_SOURCE_DIR}/ArtificialNN/src/Instruments/Matrix")
set(ANN_INCLUDE_DIR ${ANN_INCLUDE_DIR} "${CMAKE_CURRENT_SOURCE_DIR}/ArtificialNN/src/Instruments/Tensor")
set(ANN_INCLUDE_DIR ${ANN_INCLUDE_DIR} "${CMAKE_CURRENT_SOURCE_DIR}/ArtificialNN/src/Instruments/Metrix")
set(ANN_INCLUDE_DIR ${ANN_INCLUDE_DIR} "${CMAKE_CURRENT_SOURCE_DIR}/ArtificialNN/src/Instruments/GradDence")

set(ANN_INCLUDE_DIR ${ANN_INCLUDE_DIR} "${CMAKE_CURRENT_SOURCE_DIR}/ArtificialNN/src/Preprocessing")

set(ANN_INCLUDE_DIR ${ANN_INCLUDE_DIR} "${CMAKE_CURRENT_SOURCE_DIR}/ArtificialNN/src/ANN/Neyron/Weights")
set(ANN_INCLUDE_DIR ${ANN_INCLUDE_DIR} "${CMAKE_CURRENT_SOURCE_DIR}/ArtificialNN/src/ANN/Neyron")
set(ANN_INCLUDE_DIR ${ANN_INCLUDE_DIR} "${CMAKE_CURRENT_SOURCE_DIR}/ArtificialNN/src/ANN/LearnNeyron")

set(ANN_INCLUDE_DIR ${ANN_INCLUDE_DIR} "${CMAKE_CURRENT_SOURCE_DIR}/ArtificialNN/src/Model/DenceLayer")
set(ANN_INCLUDE_DIR ${ANN_INCLUDE_DIR} "${CMAKE_CURRENT_SOURCE_DIR}/ArtificialNN/src/Model/ConvolutionLayer")
set(ANN_INCLUDE_DIR ${ANN_INCLUDE_DIR} "${CMAKE_CURRENT_SOURCE_DIR}/ArtificialNN/src/Model/MaxpoolingLayer")
set(ANN_INCLUDE_DIR ${ANN_INCLUDE_DIR} "${CMAKE_CURRENT_SOURCE_DIR}/ArtificialNN/src/Model/FlattenLayer")
set(ANN_INCLUDE_DIR ${ANN_INCLUDE_DIR} "${CMAKE_CURRENT_SOURCE_DIR}/ArtificialNN/src/Model")

if(${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
	message(-- Building <ArtificialNN> for <${CMAKE_CXX_COMPILER_ID}> compiler)
	SET(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} /arch:SSE /arch:SSE2 /arch:AVX")
	SET(BUILD_SHARED_LIBS OFF)

elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL AppleClang)
	message(-- Building <ArtificialNN> for <${CMAKE_CXX_COMPILER_ID}> compiler)
	SET(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -std=c++17")
elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL GNU)
	message(-- Building <ArtificialNN> for <${CMAKE_CXX_COMPILER_ID}> compiler)
	SET(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -std=c++17 --param ggc-min-expand=1 --param ggc-min-heapsize=32768")
else()
	message(-- Building <ArtificialNN> for ${CMAKE_CXX_COMPILER_ID} compiler)
	SET(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -std=c++17")
endif()

add_subdirectory(ArtificialNN)
add_subdirectory(CNN_Network)
add_subdirectory(DeepNetwork_sigm_sigm)
add_subdirectory(DeepNetwork_relu_sigm)
add_subdirectory(NotSoSimplePerceptron_Sigm)
add_subdirectory(SimplePerceptron)
add_subdirectory(Perf_test)

set(BUILD_LIST "ts,core,imgcodecs,highgui" CACHE STRING "")
set(WITH_WEBP OFF CACHE BOOL "")
set(WITH_ZLIB OFF CACHE BOOL "")
set(WITH_OPENEXR OFF CACHE BOOL "")
set(WITH_PROTOBUF OFF CACHE BOOL "")
set(WITH_FFMPEG OFF CACHE BOOL "")
set(WITH_IPP OFF CACHE BOOL "")
set(WITH_JASPER OFF CACHE BOOL "")
set(WITH_QUIRC OFF CACHE BOOL "")
set(WITH_ITT OFF CACHE BOOL "")
set(WITH_ADE OFF CACHE BOOL "")
set(WITH_OPENCL OFF CACHE BOOL "")
set(WITH_TIFF OFF CACHE BOOL "")
set(BUILD_ZLIB OFF CACHE BOOL "")
set(WITH_JASPER OFF CACHE BOOL "")
set(BUILD_opencv_ts ON CACHE BOOL "")
set(BUILD_TESTS OFF CACHE BOOL "")
set(BUILD_PERF_TESTS OFF CACHE BOOL "")
set(BUILD_opencv_apps OFF CACHE BOOL "")

add_subdirectory(lib/opencv build EXCLUDE_FROM_ALL)
add_subdirectory(Tests)
add_subdirectory(Image_to_txt)
